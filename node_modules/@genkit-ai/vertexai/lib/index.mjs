import {
  __async
} from "./chunk-WFI2LP4G.mjs";
import { genkitPlugin } from "@genkit-ai/core";
import { VertexAI } from "@google-cloud/vertexai";
import { GoogleAuth } from "google-auth-library";
import {
  SUPPORTED_ANTHROPIC_MODELS,
  anthropicModel,
  claude35Sonnet,
  claude3Haiku,
  claude3Opus,
  claude3Sonnet
} from "./anthropic.js";
import {
  SUPPORTED_EMBEDDER_MODELS,
  textEmbedding004,
  textEmbeddingGecko,
  textEmbeddingGecko001,
  textEmbeddingGecko002,
  textEmbeddingGecko003,
  textEmbeddingGeckoEmbedder,
  textEmbeddingGeckoMultilingual001,
  textMultilingualEmbedding002
} from "./embedder.js";
import {
  VertexAIEvaluationMetricType,
  vertexEvaluators
} from "./evaluation.js";
import {
  SUPPORTED_GEMINI_MODELS,
  gemini15Flash,
  gemini15FlashPreview,
  gemini15Pro,
  gemini15ProPreview,
  geminiModel,
  geminiPro,
  geminiProVision
} from "./gemini.js";
import {
  SUPPORTED_IMAGEN_MODELS,
  imagen2,
  imagen3,
  imagen3Fast,
  imagenModel
} from "./imagen.js";
import {
  SUPPORTED_OPENAI_FORMAT_MODELS,
  llama3,
  llama31,
  llama32,
  modelGardenOpenaiCompatibleModel
} from "./model_garden.js";
import {
  vertexAiIndexers,
  vertexAiRetrievers
} from "./vector-search";
import {
  DocumentIndexer,
  DocumentRetriever,
  Neighbor,
  VectorSearchOptions as VectorSearchOptions2,
  getBigQueryDocumentIndexer,
  getBigQueryDocumentRetriever,
  getFirestoreDocumentIndexer,
  getFirestoreDocumentRetriever,
  vertexAiIndexerRef,
  vertexAiIndexers as vertexAiIndexers2,
  vertexAiRetrieverRef,
  vertexAiRetrievers as vertexAiRetrievers2
} from "./vector-search";
const CLOUD_PLATFROM_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
const vertexAI = genkitPlugin(
  "vertexai",
  (options) => __async(void 0, null, function* () {
    var _a, _b;
    let authClient;
    let authOptions = options == null ? void 0 : options.googleAuth;
    if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {
      const serviceAccountCreds = JSON.parse(
        process.env.GCLOUD_SERVICE_ACCOUNT_CREDS
      );
      authOptions = {
        credentials: serviceAccountCreds,
        scopes: [CLOUD_PLATFROM_OAUTH_SCOPE]
      };
      authClient = new GoogleAuth(authOptions);
    } else {
      authClient = new GoogleAuth(
        authOptions != null ? authOptions : { scopes: [CLOUD_PLATFROM_OAUTH_SCOPE] }
      );
    }
    const projectId = (options == null ? void 0 : options.projectId) || (yield authClient.getProjectId());
    const location = (options == null ? void 0 : options.location) || "us-central1";
    const confError = (parameter, envVariableName) => {
      return new Error(
        `VertexAI Plugin is missing the '${parameter}' configuration. Please set the '${envVariableName}' environment variable or explicitly pass '${parameter}' into genkit config.`
      );
    };
    if (!location) {
      throw confError("location", "GCLOUD_LOCATION");
    }
    if (!projectId) {
      throw confError("project", "GCLOUD_PROJECT");
    }
    const vertexClientFactoryCache = {};
    const vertexClientFactory = (request) => {
      var _a2;
      const requestLocation = ((_a2 = request.config) == null ? void 0 : _a2.location) || location;
      if (!vertexClientFactoryCache[requestLocation]) {
        vertexClientFactoryCache[requestLocation] = new VertexAI({
          project: projectId,
          location: requestLocation,
          googleAuthOptions: authOptions
        });
      }
      return vertexClientFactoryCache[requestLocation];
    };
    const metrics = (options == null ? void 0 : options.evaluation) && options.evaluation.metrics.length > 0 ? options.evaluation.metrics : [];
    const models = [
      ...Object.keys(SUPPORTED_IMAGEN_MODELS).map(
        (name) => imagenModel(name, authClient, { projectId, location })
      ),
      ...Object.keys(SUPPORTED_GEMINI_MODELS).map(
        (name) => geminiModel(name, vertexClientFactory, { projectId, location })
      )
    ];
    if ((options == null ? void 0 : options.modelGardenModels) || ((_a = options == null ? void 0 : options.modelGarden) == null ? void 0 : _a.models)) {
      const mgModels = (options == null ? void 0 : options.modelGardenModels) || ((_b = options == null ? void 0 : options.modelGarden) == null ? void 0 : _b.models);
      mgModels.forEach((m) => {
        var _a2;
        const anthropicEntry = Object.entries(SUPPORTED_ANTHROPIC_MODELS).find(
          ([_, value]) => value.name === m.name
        );
        if (anthropicEntry) {
          models.push(anthropicModel(anthropicEntry[0], projectId, location));
          return;
        }
        const openaiModel = Object.entries(SUPPORTED_OPENAI_FORMAT_MODELS).find(
          ([_, value]) => value.name === m.name
        );
        if (openaiModel) {
          models.push(
            modelGardenOpenaiCompatibleModel(
              openaiModel[0],
              projectId,
              location,
              authClient,
              (_a2 = options.modelGarden) == null ? void 0 : _a2.openAiBaseUrlTemplate
            )
          );
          return;
        }
        throw new Error(`Unsupported model garden model: ${m.name}`);
      });
    }
    const embedders = Object.keys(SUPPORTED_EMBEDDER_MODELS).map(
      (name) => textEmbeddingGeckoEmbedder(name, authClient, { projectId, location })
    );
    let indexers = [];
    let retrievers = [];
    if ((options == null ? void 0 : options.vectorSearchOptions) && options.vectorSearchOptions.length > 0) {
      const defaultEmbedder = embedders[0];
      indexers = vertexAiIndexers({
        pluginOptions: options,
        authClient,
        defaultEmbedder
      });
      retrievers = vertexAiRetrievers({
        pluginOptions: options,
        authClient,
        defaultEmbedder
      });
    }
    return {
      models,
      embedders,
      evaluators: vertexEvaluators(authClient, metrics, projectId, location),
      retrievers,
      indexers
    };
  })
);
var src_default = vertexAI;
export {
  DocumentIndexer,
  DocumentRetriever,
  Neighbor,
  VectorSearchOptions2 as VectorSearchOptions,
  VertexAIEvaluationMetricType,
  claude35Sonnet,
  claude3Haiku,
  claude3Opus,
  claude3Sonnet,
  src_default as default,
  gemini15Flash,
  gemini15FlashPreview,
  gemini15Pro,
  gemini15ProPreview,
  geminiPro,
  geminiProVision,
  getBigQueryDocumentIndexer,
  getBigQueryDocumentRetriever,
  getFirestoreDocumentIndexer,
  getFirestoreDocumentRetriever,
  imagen2,
  imagen3,
  imagen3Fast,
  llama3,
  llama31,
  llama32,
  textEmbedding004,
  textEmbeddingGecko,
  textEmbeddingGecko001,
  textEmbeddingGecko002,
  textEmbeddingGecko003,
  textEmbeddingGeckoMultilingual001,
  textMultilingualEmbedding002,
  vertexAI,
  vertexAiIndexerRef,
  vertexAiIndexers2 as vertexAiIndexers,
  vertexAiRetrieverRef,
  vertexAiRetrievers2 as vertexAiRetrievers
};
//# sourceMappingURL=index.mjs.map