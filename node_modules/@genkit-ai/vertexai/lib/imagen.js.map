{"version":3,"sources":["../src/imagen.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CandidateData,\n  defineModel,\n  GenerateRequest,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  modelRef,\n  ModelReference,\n} from '@genkit-ai/ai/model';\nimport { GoogleAuth } from 'google-auth-library';\nimport z from 'zod';\nimport { PluginOptions } from './index.js';\nimport { PredictClient, predictModel } from './predict.js';\n\nconst ImagenConfigSchema = GenerationCommonConfigSchema.extend({\n  /** Language of the prompt text. */\n  language: z\n    .enum(['auto', 'en', 'es', 'hi', 'ja', 'ko', 'pt', 'zh-TW', 'zh', 'zh-CN'])\n    .optional(),\n  /** Desired aspect ratio of output image. */\n  aspectRatio: z.enum(['1:1', '9:16', '16:9', '3:4', '4:3']).optional(),\n  /**\n   * A negative prompt to help generate the images. For example: \"animals\"\n   * (removes animals), \"blurry\" (makes the image clearer), \"text\" (removes\n   * text), or \"cropped\" (removes cropped images).\n   **/\n  negativePrompt: z.string().optional(),\n  /**\n   * Any non-negative integer you provide to make output images deterministic.\n   * Providing the same seed number always results in the same output images.\n   * Accepted integer values: 1 - 2147483647.\n   **/\n  seed: z.number().optional(),\n  /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/\n  location: z.string().optional(),\n  /** Allow generation of people by the model. */\n  personGeneration: z\n    .enum(['dont_allow', 'allow_adult', 'allow_all'])\n    .optional(),\n  /** Adds a filter level to safety filtering. */\n  safetySetting: z\n    .enum(['block_most', 'block_some', 'block_few', 'block_fewest'])\n    .optional(),\n  /** Add an invisible watermark to the generated images. */\n  addWatermark: z.boolean().optional(),\n  /** Cloud Storage URI to store the generated images. **/\n  storageUri: z.string().optional(),\n  /** Mode must be set for upscaling requests. */\n  mode: z.enum(['upscale']).optional(),\n  /**\n   * Describes the editing intention for the request.\n   *\n   * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.\n   */\n  editConfig: z\n    .object({\n      /** Describes the editing intention for the request. */\n      editMode: z\n        .enum([\n          'inpainting-insert',\n          'inpainting-remove',\n          'outpainting',\n          'product-image',\n        ])\n        .optional(),\n      /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */\n      maskMode: z\n        .object({\n          maskType: z.enum(['background', 'foreground', 'semantic']),\n          classes: z.array(z.number()).optional(),\n        })\n        .optional(),\n      maskDilation: z.number().optional(),\n      guidanceScale: z.number().optional(),\n      productPosition: z.enum(['reposition', 'fixed']).optional(),\n    })\n    .passthrough()\n    .optional(),\n  /** Upscale config object. */\n  upscaleConfig: z.object({ upscaleFactor: z.enum(['x2', 'x4']) }).optional(),\n}).passthrough();\n\nexport const imagen2 = modelRef({\n  name: 'vertexai/imagen2',\n  info: {\n    label: 'Vertex AI - Imagen2',\n    versions: ['imagegeneration@006', 'imagegeneration@005'],\n    supports: {\n      media: false,\n      multiturn: false,\n      tools: false,\n      systemRole: false,\n      output: ['media'],\n    },\n  },\n  version: 'imagegeneration@006',\n  configSchema: ImagenConfigSchema,\n});\n\nexport const imagen3 = modelRef({\n  name: 'vertexai/imagen3',\n  info: {\n    label: 'Vertex AI - Imagen3',\n    versions: ['imagen-3.0-generate-001'],\n    supports: {\n      media: true,\n      multiturn: false,\n      tools: false,\n      systemRole: false,\n      output: ['media'],\n    },\n  },\n  version: 'imagen-3.0-generate-001',\n  configSchema: ImagenConfigSchema,\n});\n\nexport const imagen3Fast = modelRef({\n  name: 'vertexai/imagen3-fast',\n  info: {\n    label: 'Vertex AI - Imagen3 Fast',\n    versions: ['imagen-3.0-fast-generate-001'],\n    supports: {\n      media: false,\n      multiturn: false,\n      tools: false,\n      systemRole: false,\n      output: ['media'],\n    },\n  },\n  version: 'imagen-3.0-fast-generate-001',\n  configSchema: ImagenConfigSchema,\n});\n\nexport const SUPPORTED_IMAGEN_MODELS = {\n  imagen2: imagen2,\n  imagen3: imagen3,\n  'imagen3-fast': imagen3Fast,\n};\n\nfunction extractText(request: GenerateRequest) {\n  return request.messages\n    .at(-1)!\n    .content.map((c) => c.text || '')\n    .join('');\n}\n\ninterface ImagenParameters {\n  sampleCount?: number;\n  aspectRatio?: string;\n  negativePrompt?: string;\n  seed?: number;\n  language?: string;\n  personGeneration?: string;\n  safetySetting?: string;\n  addWatermark?: boolean;\n  storageUri?: string;\n}\n\nfunction toParameters(\n  request: GenerateRequest<typeof ImagenConfigSchema>\n): ImagenParameters {\n  const out = {\n    sampleCount: request.candidates ?? 1,\n    ...request?.config,\n  };\n\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n\n  return out;\n}\n\nfunction extractMaskImage(request: GenerateRequest): string | undefined {\n  return request.messages\n    .at(-1)\n    ?.content.find((p) => !!p.media && p.metadata?.type === 'mask')\n    ?.media?.url.split(',')[1];\n}\n\nfunction extractBaseImage(request: GenerateRequest): string | undefined {\n  return request.messages\n    .at(-1)\n    ?.content.find(\n      (p) => !!p.media && (!p.metadata?.type || p.metadata?.type === 'base')\n    )\n    ?.media?.url.split(',')[1];\n}\n\ninterface ImagenPrediction {\n  bytesBase64Encoded: string;\n  mimeType: string;\n}\n\ninterface ImagenInstance {\n  prompt: string;\n  image?: { bytesBase64Encoded: string };\n  mask?: { image?: { bytesBase64Encoded: string } };\n}\n\nexport function imagenModel(\n  name: string,\n  client: GoogleAuth,\n  options: PluginOptions\n) {\n  const modelName = `vertexai/${name}`;\n  const model: ModelReference<z.ZodTypeAny> = SUPPORTED_IMAGEN_MODELS[name];\n  if (!model) throw new Error(`Unsupported model: ${name}`);\n\n  const predictClients: Record<\n    string,\n    PredictClient<ImagenInstance, ImagenPrediction, ImagenParameters>\n  > = {};\n  const predictClientFactory = (\n    request: GenerateRequest<typeof ImagenConfigSchema>\n  ): PredictClient<ImagenInstance, ImagenPrediction, ImagenParameters> => {\n    const requestLocation = request.config?.location || options.location;\n    if (!predictClients[requestLocation]) {\n      predictClients[requestLocation] = predictModel<\n        ImagenInstance,\n        ImagenPrediction,\n        ImagenParameters\n      >(\n        client,\n        {\n          ...options,\n          location: requestLocation,\n        },\n        request.config?.version || model.version || name\n      );\n    }\n    return predictClients[requestLocation];\n  };\n\n  return defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: ImagenConfigSchema,\n    },\n    async (request) => {\n      const instance: ImagenInstance = {\n        prompt: extractText(request),\n      };\n      const baseImage = extractBaseImage(request);\n      if (baseImage) {\n        instance.image = { bytesBase64Encoded: baseImage };\n      }\n      const maskImage = extractMaskImage(request);\n      if (maskImage) {\n        instance.mask = {\n          image: { bytesBase64Encoded: maskImage },\n        };\n      }\n\n      const req: any = {\n        instances: [instance],\n        parameters: toParameters(request),\n      };\n\n      const predictClient = predictClientFactory(request);\n      const response = await predictClient([instance], toParameters(request));\n\n      const candidates: CandidateData[] = response.predictions.map((p, i) => {\n        const b64data = p.bytesBase64Encoded;\n        const mimeType = p.mimeType;\n        return {\n          index: i,\n          finishReason: 'stop',\n          message: {\n            role: 'model',\n            content: [\n              {\n                media: {\n                  url: `data:${mimeType};base64,${b64data}`,\n                  contentType: mimeType,\n                },\n              },\n            ],\n          },\n        };\n      });\n      return {\n        candidates,\n        usage: {\n          ...getBasicUsageStats(request.messages, candidates),\n          custom: { generations: candidates.length },\n        },\n        custom: response,\n      };\n    }\n  );\n}\n"],"mappings":"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","names":["z","_a","_b"]}