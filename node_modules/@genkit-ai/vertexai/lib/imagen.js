"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var imagen_exports = {};
__export(imagen_exports, {
  SUPPORTED_IMAGEN_MODELS: () => SUPPORTED_IMAGEN_MODELS,
  imagen2: () => imagen2,
  imagen3: () => imagen3,
  imagen3Fast: () => imagen3Fast,
  imagenModel: () => imagenModel
});
module.exports = __toCommonJS(imagen_exports);
var import_model = require("@genkit-ai/ai/model");
var import_zod = __toESM(require("zod"));
var import_predict = require("./predict.js");
const ImagenConfigSchema = import_model.GenerationCommonConfigSchema.extend({
  /** Language of the prompt text. */
  language: import_zod.default.enum(["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]).optional(),
  /** Desired aspect ratio of output image. */
  aspectRatio: import_zod.default.enum(["1:1", "9:16", "16:9", "3:4", "4:3"]).optional(),
  /**
   * A negative prompt to help generate the images. For example: "animals"
   * (removes animals), "blurry" (makes the image clearer), "text" (removes
   * text), or "cropped" (removes cropped images).
   **/
  negativePrompt: import_zod.default.string().optional(),
  /**
   * Any non-negative integer you provide to make output images deterministic.
   * Providing the same seed number always results in the same output images.
   * Accepted integer values: 1 - 2147483647.
   **/
  seed: import_zod.default.number().optional(),
  /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
  location: import_zod.default.string().optional(),
  /** Allow generation of people by the model. */
  personGeneration: import_zod.default.enum(["dont_allow", "allow_adult", "allow_all"]).optional(),
  /** Adds a filter level to safety filtering. */
  safetySetting: import_zod.default.enum(["block_most", "block_some", "block_few", "block_fewest"]).optional(),
  /** Add an invisible watermark to the generated images. */
  addWatermark: import_zod.default.boolean().optional(),
  /** Cloud Storage URI to store the generated images. **/
  storageUri: import_zod.default.string().optional(),
  /** Mode must be set for upscaling requests. */
  mode: import_zod.default.enum(["upscale"]).optional(),
  /**
   * Describes the editing intention for the request.
   *
   * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
   */
  editConfig: import_zod.default.object({
    /** Describes the editing intention for the request. */
    editMode: import_zod.default.enum([
      "inpainting-insert",
      "inpainting-remove",
      "outpainting",
      "product-image"
    ]).optional(),
    /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
    maskMode: import_zod.default.object({
      maskType: import_zod.default.enum(["background", "foreground", "semantic"]),
      classes: import_zod.default.array(import_zod.default.number()).optional()
    }).optional(),
    maskDilation: import_zod.default.number().optional(),
    guidanceScale: import_zod.default.number().optional(),
    productPosition: import_zod.default.enum(["reposition", "fixed"]).optional()
  }).passthrough().optional(),
  /** Upscale config object. */
  upscaleConfig: import_zod.default.object({ upscaleFactor: import_zod.default.enum(["x2", "x4"]) }).optional()
}).passthrough();
const imagen2 = (0, import_model.modelRef)({
  name: "vertexai/imagen2",
  info: {
    label: "Vertex AI - Imagen2",
    versions: ["imagegeneration@006", "imagegeneration@005"],
    supports: {
      media: false,
      multiturn: false,
      tools: false,
      systemRole: false,
      output: ["media"]
    }
  },
  version: "imagegeneration@006",
  configSchema: ImagenConfigSchema
});
const imagen3 = (0, import_model.modelRef)({
  name: "vertexai/imagen3",
  info: {
    label: "Vertex AI - Imagen3",
    versions: ["imagen-3.0-generate-001"],
    supports: {
      media: true,
      multiturn: false,
      tools: false,
      systemRole: false,
      output: ["media"]
    }
  },
  version: "imagen-3.0-generate-001",
  configSchema: ImagenConfigSchema
});
const imagen3Fast = (0, import_model.modelRef)({
  name: "vertexai/imagen3-fast",
  info: {
    label: "Vertex AI - Imagen3 Fast",
    versions: ["imagen-3.0-fast-generate-001"],
    supports: {
      media: false,
      multiturn: false,
      tools: false,
      systemRole: false,
      output: ["media"]
    }
  },
  version: "imagen-3.0-fast-generate-001",
  configSchema: ImagenConfigSchema
});
const SUPPORTED_IMAGEN_MODELS = {
  imagen2,
  imagen3,
  "imagen3-fast": imagen3Fast
};
function extractText(request) {
  return request.messages.at(-1).content.map((c) => c.text || "").join("");
}
function toParameters(request) {
  var _a;
  const out = __spreadValues({
    sampleCount: (_a = request.candidates) != null ? _a : 1
  }, request == null ? void 0 : request.config);
  for (const k in out) {
    if (!out[k])
      delete out[k];
  }
  return out;
}
function extractMaskImage(request) {
  var _a, _b, _c;
  return (_c = (_b = (_a = request.messages.at(-1)) == null ? void 0 : _a.content.find((p) => {
    var _a2;
    return !!p.media && ((_a2 = p.metadata) == null ? void 0 : _a2.type) === "mask";
  })) == null ? void 0 : _b.media) == null ? void 0 : _c.url.split(",")[1];
}
function extractBaseImage(request) {
  var _a, _b, _c;
  return (_c = (_b = (_a = request.messages.at(-1)) == null ? void 0 : _a.content.find(
    (p) => {
      var _a2, _b2;
      return !!p.media && (!((_a2 = p.metadata) == null ? void 0 : _a2.type) || ((_b2 = p.metadata) == null ? void 0 : _b2.type) === "base");
    }
  )) == null ? void 0 : _b.media) == null ? void 0 : _c.url.split(",")[1];
}
function imagenModel(name, client, options) {
  const modelName = `vertexai/${name}`;
  const model = SUPPORTED_IMAGEN_MODELS[name];
  if (!model)
    throw new Error(`Unsupported model: ${name}`);
  const predictClients = {};
  const predictClientFactory = (request) => {
    var _a, _b;
    const requestLocation = ((_a = request.config) == null ? void 0 : _a.location) || options.location;
    if (!predictClients[requestLocation]) {
      predictClients[requestLocation] = (0, import_predict.predictModel)(
        client,
        __spreadProps(__spreadValues({}, options), {
          location: requestLocation
        }),
        ((_b = request.config) == null ? void 0 : _b.version) || model.version || name
      );
    }
    return predictClients[requestLocation];
  };
  return (0, import_model.defineModel)(
    __spreadProps(__spreadValues({
      name: modelName
    }, model.info), {
      configSchema: ImagenConfigSchema
    }),
    (request) => __async(this, null, function* () {
      const instance = {
        prompt: extractText(request)
      };
      const baseImage = extractBaseImage(request);
      if (baseImage) {
        instance.image = { bytesBase64Encoded: baseImage };
      }
      const maskImage = extractMaskImage(request);
      if (maskImage) {
        instance.mask = {
          image: { bytesBase64Encoded: maskImage }
        };
      }
      const req = {
        instances: [instance],
        parameters: toParameters(request)
      };
      const predictClient = predictClientFactory(request);
      const response = yield predictClient([instance], toParameters(request));
      const candidates = response.predictions.map((p, i) => {
        const b64data = p.bytesBase64Encoded;
        const mimeType = p.mimeType;
        return {
          index: i,
          finishReason: "stop",
          message: {
            role: "model",
            content: [
              {
                media: {
                  url: `data:${mimeType};base64,${b64data}`,
                  contentType: mimeType
                }
              }
            ]
          }
        };
      });
      return {
        candidates,
        usage: __spreadProps(__spreadValues({}, (0, import_model.getBasicUsageStats)(request.messages, candidates)), {
          custom: { generations: candidates.length }
        }),
        custom: response
      };
    })
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SUPPORTED_IMAGEN_MODELS,
  imagen2,
  imagen3,
  imagen3Fast,
  imagenModel
});
//# sourceMappingURL=imagen.js.map